name: Build Monte Card APK

on:
  push:
    branches: [ android-build ]
  pull_request:
    branches: [ android-build ]
  workflow_dispatch:  # Manual trigger

jobs:
  build-apk:
    runs-on: ubuntu-20.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          git \
          unzip \
          zip \
          openjdk-11-jdk \
          python3-pip \
          python3-dev \
          python3-setuptools \
          libffi-dev \
          libssl-dev \
          libbz2-dev \
          libsqlite3-dev \
          libncurses5-dev \
          libncursesw5-dev \
          liblzma-dev \
          uuid-dev \
          lld \
          autotools-dev \
          autoconf \
          pkg-config \
          zlib1g-dev \
          libltdl-dev
          
    - name: Set up Java environment
      run: |
        echo "JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64" >> $GITHUB_ENV
        echo "/usr/lib/jvm/java-11-openjdk-amd64/bin" >> $GITHUB_PATH
        
    - name: Install Buildozer and Cython
      run: |
        python -m pip install --upgrade pip wheel setuptools
        pip install buildozer cython==0.29.33
        
    - name: Create necessary directories and files
      run: |
        # Create data directory for icon
        mkdir -p data
        
        # Create a simple app icon using Python
        python3 -c "
from PIL import Image, ImageDraw, ImageFont
import os

# Create app icon
img = Image.new('RGBA', (512, 512), (25, 118, 210, 255))  # Material Blue
draw = ImageDraw.Draw(img)

# Draw a simple card-like design
card_color = (255, 255, 255, 255)
draw.rounded_rectangle([80, 100, 432, 412], radius=20, fill=card_color)

# Draw card details
draw.rounded_rectangle([100, 120, 180, 200], radius=10, fill=(244, 67, 54, 255))  # Red
draw.rounded_rectangle([200, 120, 280, 200], radius=10, fill=(76, 175, 80, 255))   # Green  
draw.rounded_rectangle([300, 120, 380, 200], radius=10, fill=(33, 150, 243, 255))  # Blue

# Try to add text (fallback if font fails)
try:
    draw.text((190, 320), 'MC', fill=(25, 118, 210, 255), anchor='mm')
except:
    pass

img.save('data/icon.png')
print('Icon created successfully')
"
        
        # Create file_paths.xml for file provider
        mkdir -p res/xml
        cat > res/xml/file_paths.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<paths xmlns:android="http://schemas.android.com/apk/res/android">
    <external-path name="external_files" path="."/>
    <files-path name="internal_files" path="."/>
    <cache-path name="cache_files" path="."/>
    <external-cache-path name="external_cache" path="."/>
</paths>
EOF

        # Create no_backup_rules.xml
        mkdir -p res/xml
        cat > res/xml/no_backup_rules.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<full-backup-content>
    <exclude domain="file" path="." />
    <exclude domain="database" path="." />
    <exclude domain="sharedpref" path="." />
    <exclude domain="external" path="." />
</full-backup-content>
EOF

    - name: Cache Buildozer global directory
      uses: actions/cache@v3
      with:
        path: .buildozer_global
        key: buildozer-global-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-global-${{ runner.os }}-
          
    - name: Cache Buildozer directory  
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-${{ runner.os }}-
          
    - name: Build APK with Buildozer
      run: |
        # Accept Android SDK licenses
        yes | buildozer android debug || true
        
        # If first build fails, clean and retry (common with fresh setup)
        if [ ! -f bin/*.apk ]; then
          echo "First build failed, cleaning and retrying..."
          buildozer android clean
          yes | buildozer android debug
        fi
        
    - name: List generated files
      run: |
        echo "=== Files in bin directory ==="
        ls -la bin/ || echo "No bin directory found"
        
        echo "=== All APK files ==="
        find . -name "*.apk" -type f
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: monte-card-debug-apk
        path: bin/*.apk
        retention-days: 30
        
    - name: Upload build logs on failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-logs
        path: |
          .buildozer/android/platform/build-**/logs/
          .buildozer/android/logs/
        retention-days: 7
        
    - name: Show APK info
      if: success()
      run: |
        APK_FILE=$(find bin -name "*.apk" | head -1)
        if [ -f "$APK_FILE" ]; then
          echo "‚úÖ APK built successfully: $APK_FILE"
          echo "üì± Size: $(du -h "$APK_FILE" | cut -f1)"
          echo "üîß You can download it from the 'Artifacts' section above"
        else
          echo "‚ùå No APK file found"
        fi