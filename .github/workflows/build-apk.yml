name: Build Monte Card APK

on:
  push:
    branches: [ android-build ]
  workflow_dispatch:

jobs:
  build-apk:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y openjdk-17-jdk build-essential git unzip zip wget curl

    - name: Set up Android SDK manually
      run: |
        set -e  # Exit on any error
        
        echo "=== Starting Android SDK Setup ==="
        
        # Set SDK root path and export to GITHUB_ENV for subsequent steps
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        export ANDROID_SDK_ROOT=$HOME/android-sdk
        export ANDROID_HOME=$HOME/android-sdk
        
        echo "SDK paths set: ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"

        # Create necessary directories for SDK
        mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
        echo "Created directory: $ANDROID_SDK_ROOT/cmdline-tools"

        # Download Android Command Line Tools
        echo "=== Downloading Command Line Tools ==="
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-8583975_latest.zip -O cmdline-tools.zip
        
        if [ ! -f cmdline-tools.zip ]; then
            echo "ERROR: Failed to download cmdline-tools.zip"
            exit 1
        fi
        
        echo "Download completed. File size:"
        ls -lh cmdline-tools.zip
        
        # Extract and verify structure
        echo "=== Extracting Command Line Tools ==="
        unzip -q cmdline-tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools
        
        echo "Contents after extraction:"
        ls -la $ANDROID_SDK_ROOT/cmdline-tools/
        
        # Check if cmdline-tools directory exists inside
        if [ -d "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" ]; then
            echo "Found cmdline-tools subdirectory, moving to latest..."
            mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest
        else
            echo "ERROR: cmdline-tools subdirectory not found after extraction"
            echo "Available directories:"
            find $ANDROID_SDK_ROOT/cmdline-tools -type d
            exit 1
        fi
        
        rm cmdline-tools.zip
        
        # Verify final structure
        echo "=== Final directory structure ==="
        echo "Contents of cmdline-tools/latest:"
        ls -la $ANDROID_SDK_ROOT/cmdline-tools/latest/ || echo "latest directory not found"
        
        echo "Contents of cmdline-tools/latest/bin:"
        ls -la $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/ || echo "bin directory not found"

        # Add cmdline-tools to PATH for this step
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin
        echo "PATH updated: $PATH"

        # Verify sdkmanager is accessible
        echo "=== Verifying sdkmanager ==="
        which sdkmanager || echo "sdkmanager not found in PATH"
        
        if command -v sdkmanager >/dev/null 2>&1; then
            echo "sdkmanager found, checking version..."
            sdkmanager --version || echo "sdkmanager version check failed"
        else
            echo "ERROR: sdkmanager command not available"
            echo "Searching for sdkmanager in SDK directory..."
            find $ANDROID_SDK_ROOT -name "sdkmanager" -type f 2>/dev/null || echo "sdkmanager not found anywhere"
            exit 1
        fi

        # Install SDK components using sdkmanager
        echo "=== Installing SDK components ==="
        echo "Installing platforms;android-33..."
        yes | sdkmanager "platforms;android-33" || { echo "Failed to install platforms;android-33"; exit 1; }
        
        echo "Installing build-tools;33.0.0..."
        yes | sdkmanager "build-tools;33.0.0" || { echo "Failed to install build-tools;33.0.0"; exit 1; }
        
        echo "Installing ndk;25.2.9519653..."
        yes | sdkmanager "ndk;25.2.9519653" || { echo "Failed to install NDK"; exit 1; }
        
        echo "Installing cmake;3.18.1..."
        yes | sdkmanager "cmake;3.18.1" || { echo "Failed to install CMake"; exit 1; }
        
        echo "Installing patcher;v4..."
        yes | sdkmanager "patcher;v4" || { echo "Failed to install patcher"; exit 1; }
        
        # Accept all SDK licenses
        echo "=== Accepting SDK licenses ==="
        yes | sdkmanager --licenses || { echo "Failed to accept licenses"; exit 1; }
        
        # Set NDK root for Buildozer compatibility
        echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
        
        echo "=== Android SDK setup completed successfully ==="

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython==0.29.33 pillow

    - name: Set environment variables (for Java)
      run: |
        # JAVA_HOME is set here from system apt-get install
        echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
        # ANDROID_HOME, ANDROID_SDK_ROOT, ANDROID_NDK_ROOT are now set by "Set up Android SDK manually" step

    - name: Symlink build-tools for Buildozer
      run: |
        mkdir -p /home/runner/.buildozer/android/platform/android-sdk
        ln -sfn $ANDROID_SDK_ROOT/build-tools /home/runner/.buildozer/android/platform/android-sdk/build-tools

    - name: Symlink cmdline-tools for Buildozer compatibility
      run: |
        mkdir -p /home/runner/.buildozer/android/platform/android-sdk
        ln -sfn $ANDROID_SDK_ROOT/cmdline-tools/latest /home/runner/.buildozer/android/platform/android-sdk/tools

    - name: Verify SDK paths
      run: |
        echo "=== Android SDK Structure ==="
        ls -la $ANDROID_SDK_ROOT/ || echo "SDK root not found"
        echo "=== Buildozer Expected Paths ==="
        ls -la /home/runner/.buildozer/android/platform/android-sdk/ || echo "Buildozer paths not created yet"
        echo "=== SDK Manager Location ==="
        find $ANDROID_SDK_ROOT -name "sdkmanager" -type f || echo "sdkmanager not found"

    - name: Create app icon
      run: |
        mkdir -p data
        python3 -c "from PIL import Image, ImageDraw; img = Image.new('RGB', (512, 512), (33, 150, 243)); draw = ImageDraw.Draw(img); draw.rectangle([100, 100, 412, 412], fill=(255, 255, 255)); img.save('data/icon.png'); print('Icon created')"

    - name: Cache buildozer global directory
      uses: actions/cache@v3
      with:
        path: .buildozer_global
        key: buildozer-global-${{ hashFiles('buildozer.spec') }}

    - name: Cache buildozer directory
      uses: actions/cache@v3
      with:
        path: .buildozer
        key: buildozer-${{ hashFiles('buildozer.spec') }}
        restore-keys: |
          buildozer-

    - name: Build APK
      run: |
        yes | buildozer android debug

    - name: List build output
      run: |
        echo "=== Build completed ==="
        ls -la bin/ || echo "No bin directory"
        find . -name "*.apk" -type f || echo "No APK found"

    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: monte-card-apk
        path: bin/*.apk
        retention-days: 30
