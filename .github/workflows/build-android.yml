# .github/workflows/build-android.yml
name: 🤖 Build Android APK

on:
  push:
    branches: [ main, master, imports-removed ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🐍 Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: ☕ Set up Java JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: 📱 Setup Android SDK manually
      run: |
        # Download and setup Android SDK
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mkdir -p $HOME/android-sdk/cmdline-tools
        mv cmdline-tools $HOME/android-sdk/cmdline-tools/latest
        
        # Set environment variables
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH
        
        # Accept licenses and install required packages
        yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.2"
        
        # Download and setup NDK
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager "ndk;25.2.9519653"
        echo "ANDROID_NDK_ROOT=$HOME/android-sdk/ndk/25.2.9519653" >> $GITHUB_ENV
        
    - name: 🔧 Install system dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          build-essential \
          git \
          python3-dev \
          libffi-dev \
          libssl-dev \
          libjpeg-dev \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo5 \
          cmake \
          zip \
          unzip \
          autoconf \
          libtool \
          pkg-config \
          libz-dev
          
    - name: 📦 Install Python build tools
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install buildozer cython==0.29.33
        
    - name: 🗂️ Create buildozer directories
      run: |
        mkdir -p $HOME/.buildozer
        mkdir -p .buildozer
        
    - name: 💾 Cache buildozer dependencies
      uses: actions/cache@v3
      with:
        path: |
          .buildozer
          .buildozer_global
        key: buildozer-${{ runner.os }}-${{ hashFiles('buildozer.spec', '**/*.py') }}
        restore-keys: |
          buildozer-${{ runner.os }}-
          
    - name: 📋 Show project info
      run: |
        echo "📄 buildozer.spec content:"
        cat buildozer.spec
        echo ""
        echo "🐍 Python files in project:"
        find . -name "*.py" -type f | head -10
        
    - name: 🔍 Environment check
      run: |
        buildozer --version
        echo "Android SDK: $ANDROID_SDK_ROOT"
        echo "Android NDK: $ANDROID_NDK_ROOT"
        java -version
        python --version
        
    - name: 🧹 Clean previous builds
      run: |
        buildozer android clean || true
        
    - name: 🏗️ Build Android APK
      run: |
        echo "🚀 Starting APK build..."
        buildozer -v android debug
        
    - name: 📱 List generated files
      run: |
        echo "📦 Generated files:"
        find . -name "*.apk" -type f -exec ls -lh {} \;
        
    - name: 📤 Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: monte-card-app-${{ github.run_number }}
        path: bin/*.apk
        retention-days: 30
        
    - name: 📊 Build summary
      if: always()
      run: |
        echo "## 📱 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if find . -name "*.apk" -type f | grep -q .; then
          APK_FILE=$(find . -name "*.apk" -type f | head -1)
          APK_SIZE=$(du -h "$APK_FILE" | cut -f1)
          echo "✅ **APK Build**: SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "📦 **APK Size**: $APK_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "📁 **APK Location**: \`bin/\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **APK Build**: FAILED" >> $GITHUB_STEP_SUMMARY
          echo "📋 Check build logs for details" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🕒 **Build Time**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "🌿 **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
