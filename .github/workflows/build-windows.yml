name: Build Windows Executable

on:
  push:
    branches: [ real-microsoft-store-submission ]
  pull_request:
    branches: [ real-microsoft-store-submission ]
  workflow_dispatch:

jobs:
  build-msix-package:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka
        pip install kivy kivy-deps.angle kivy-deps.sdl2 kivy-deps.glew
        pip install kivymd pillow qrcode bcrypt cryptography
        pip install pygame plyer mutagen imageio imageio-ffmpeg psutil
    
    - name: Install Windows SDK and MSIX Tools
      run: |
        # Install Windows SDK for makeappx.exe
        Write-Host "Installing Windows SDK..."
        $sdkUrl = "https://go.microsoft.com/fwlink/?linkid=2164145"
        Invoke-WebRequest -Uri $sdkUrl -OutFile "winsdksetup.exe"
        Start-Process -FilePath "winsdksetup.exe" -ArgumentList "/quiet", "/features", "OptionId.WindowsAppCertificationKit", "OptionId.ManagedNative" -Wait
        
        # Verify installation
        $makeappxPath = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\makeappx.exe"
        if (Test-Path $makeappxPath) {
          Write-Host "‚úÖ Windows SDK installed successfully"
        } else {
          Write-Host "‚ùå Windows SDK installation failed"
          # Try alternative path
          $altPath = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Name "makeappx.exe" | Select-Object -First 1
          if ($altPath) {
            Write-Host "Found makeappx.exe at: $altPath"
          }
        }
    
    - name: Create app icon (if missing)
      run: |
        if (-not (Test-Path "icon.png")) {
          Write-Host "Creating placeholder icon..."
          # Create a simple colored square as placeholder
          Add-Type -AssemblyName System.Drawing
          $bitmap = New-Object System.Drawing.Bitmap(256, 256)
          $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
          $brush = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::Blue)
          $graphics.FillRectangle($brush, 0, 0, 256, 256)
          $bitmap.Save("icon.png", [System.Drawing.Imaging.ImageFormat]::Png)
          $graphics.Dispose()
          $bitmap.Dispose()
          Write-Host "Placeholder icon created"
        }
    
    - name: Build standalone app with Nuitka
      env:
        KIVY_GL_BACKEND: angle_sdl2
      run: |
        Write-Host "Building standalone application..."
        python -m nuitka `
        --standalone `
        --assume-yes-for-downloads `
        --windows-disable-console `
        --output-filename=AceInTheHole.exe `
        --windows-icon-from-ico=icon.png `
        --windows-company-name="Your Company" `
        --windows-product-name="Card Shark Pro" `
        --windows-file-version=1.0.0.0 `
        --windows-product-version=1.0.0.0 `
        --windows-file-description="Secure vault application" `
        --include-package=kivymd `
        --include-package=kivy `
        --include-package=PIL `
        --include-package=qrcode `
        --include-package=bcrypt `
        --include-package=cryptography `
        --include-package=pygame `
        --include-package=plyer `
        --include-package=mutagen `
        --include-package=imageio `
        --include-package=psutil `
        --include-package=tkinter `
        --include-data-files=icon.png=icon.png `
        --include-data-files=file_transfer_ui.html=file_transfer_ui.html `
        main.py
        
        Write-Host "Nuitka build completed"
    
    - name: Prepare MSIX package structure
      run: |
        Write-Host "Creating MSIX package structure..."
        
        # Create package root directory
        $packageRoot = "msix-package"
        New-Item -ItemType Directory -Force -Path $packageRoot
        
        # Copy the entire standalone app to package
        if (Test-Path "main.dist") {
          Write-Host "Copying standalone app files..."
          Copy-Item -Recurse -Force "main.dist\*" $packageRoot
          
          # Verify main executable exists
          $exePath = Join-Path $packageRoot "AceInTheHole.exe"
          if (Test-Path $exePath) {
            Write-Host "‚úÖ Main executable found in package"
            $size = (Get-Item $exePath).Length / 1MB
            Write-Host "   Executable size: $([math]::Round($size, 2)) MB"
          } else {
            Write-Host "‚ùå Main executable not found!"
            exit 1
          }
        } else {
          Write-Host "‚ùå main.dist directory not found!"
          exit 1
        }
        
        # Create assets directory
        New-Item -ItemType Directory -Force -Path "$packageRoot\Assets"
        
        # Copy and resize icons for different sizes needed by MSIX
        if (Test-Path "icon.png") {
          Copy-Item "icon.png" "$packageRoot\Assets\Square150x150Logo.png"
          Copy-Item "icon.png" "$packageRoot\Assets\Square44x44Logo.png" 
          Copy-Item "icon.png" "$packageRoot\Assets\StoreLogo.png"
        }
        
        Write-Host "Package structure created"
    
    - name: Create MSIX manifest
      run: |
        Write-Host "Creating MSIX manifest..."
        
        $manifest = @"
        <?xml version="1.0" encoding="utf-8"?>
        <Package xmlns="http://schemas.microsoft.com/appx/manifest/foundation/windows10" 
                 xmlns:uap="http://schemas.microsoft.com/appx/manifest/uap/windows10">
          
          <Identity Name="CardSharkPro" 
                    Publisher="CN=YourCompany" 
                    Version="1.0.0.0" />
          
          <Properties>
            <DisplayName>Card Shark Pro</DisplayName>
            <PublisherDisplayName>Your Company</PublisherDisplayName>
            <Logo>Assets\StoreLogo.png</Logo>
            <Description>A secure vault application disguised as a card game</Description>
          </Properties>
          
          <Dependencies>
            <TargetDeviceFamily Name="Windows.Desktop" MinVersion="10.0.17763.0" MaxVersionTested="10.0.22000.0" />
          </Dependencies>
          
          <Applications>
            <Application Id="CardSharkPro" Executable="AceInTheHole.exe" EntryPoint="Windows.FullTrustApplication">
              <uap:VisualElements DisplayName="Card Shark Pro" 
                                  Square150x150Logo="Assets\Square150x150Logo.png" 
                                  Square44x44Logo="Assets\Square44x44Logo.png" 
                                  Description="Secure vault with card game interface" 
                                  BackgroundColor="transparent">
              </uap:VisualElements>
            </Application>
          </Applications>
          
          <Capabilities>
            <Capability Name="internetClient" />
            <uap:Capability Name="documentsLibrary" />
            <uap:Capability Name="picturesLibrary" />
            <uap:Capability Name="videosLibrary" />
            <uap:Capability Name="musicLibrary" />
          </Capabilities>
          
        </Package>
        "@
        
        $manifest | Out-File -FilePath "msix-package\Package.appxmanifest" -Encoding UTF8
        Write-Host "‚úÖ Manifest created"
    
    - name: Build MSIX package
      run: |
        Write-Host "Building MSIX package..."
        
        # Find makeappx.exe
        $makeappxPaths = @(
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\makeappx.exe",
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\makeappx.exe"
        )
        
        $makeappx = $null
        foreach ($path in $makeappxPaths) {
          if (Test-Path $path) {
            $makeappx = $path
            break
          }
        }
        
        if (-not $makeappx) {
          # Search for any version
          $makeappx = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Name "makeappx.exe" | 
                      ForEach-Object { "C:\Program Files (x86)\Windows Kits\10\bin\$_" } | 
                      Where-Object { Test-Path $_ } | 
                      Select-Object -First 1
        }
        
        if ($makeappx) {
          Write-Host "Using makeappx.exe from: $makeappx"
          
          # Create MSIX package
          & $makeappx pack /d "msix-package" /p "CardSharkPro.msix" /l
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ MSIX package created successfully!"
            $size = (Get-Item "AceInTheHole.msix").Length / 1MB
            Write-Host "   Package size: $([math]::Round($size, 2)) MB"
          } else {
            Write-Host "‚ùå MSIX package creation failed with exit code: $LASTEXITCODE"
            exit 1
          }
        } else {
          Write-Host "‚ùå makeappx.exe not found!"
          Write-Host "Creating ZIP fallback package..."
          Compress-Archive -Path "msix-package\*" -DestinationPath "AceInTheHole-Fallback.zip"
        }
    
    - name: Verify final package
      run: |
        Write-Host "=== FINAL VERIFICATION ==="
        
        # Check MSIX package
        if (Test-Path "CardSharkPro.msix") {
          $size = (Get-Item "CardSharkPro.msix").Length / 1MB
          Write-Host "‚úÖ MSIX Package: $([math]::Round($size, 2)) MB"
          Write-Host "   Ready for Microsoft Store submission!"
        } else {
          Write-Host "‚ùå MSIX package not found"
        }
        
        # Check fallback
        if (Test-Path "AceInTheHole-Fallback.zip") {
          $size = (Get-Item "AceInTheHole-Fallback.zip").Length / 1MB
          Write-Host "‚ö†Ô∏è Fallback ZIP: $([math]::Round($size, 2)) MB"
        }
        
        # List package contents
        Write-Host "`nüì¶ Package Contents:"
        if (Test-Path "msix-package") {
          Get-ChildItem "msix-package" -Recurse | Select-Object -First 10 | ForEach-Object {
            Write-Host "   $($_.FullName.Replace((Get-Location).Path + '\msix-package\', ''))"
          }
          $totalFiles = (Get-ChildItem "msix-package" -Recurse -File).Count
          Write-Host "   ... Total files: $totalFiles"
        }
    
    - name: Upload Microsoft Store Package
      uses: actions/upload-artifact@v4
      with:
        name: Microsoft-Store-MSIX-Package
        path: |
          CardSharkPro.msix
          AceInTheHole-Fallback.zip
          msix-package/Package.appxmanifest
        retention-days: 30
        if-no-files-found: warn
    
    - name: Create submission instructions
      run: |
        $instructions = @"
        üè™ MICROSOFT STORE SUBMISSION INSTRUCTIONS
        =========================================
        
        ‚úÖ YOUR PACKAGE IS READY!
        
        üì¶ What you received:
        - CardSharkPro.msix (Main package for store submission)
        - Package.appxmanifest (App manifest)
        - AceInTheHole-Fallback.zip (Backup if MSIX failed)
        
        üöÄ NEXT STEPS:
        
        1. DOWNLOAD THE MSIX PACKAGE:
           - Go to GitHub Actions artifacts
           - Download "Microsoft-Store-MSIX-Package"
           - Extract CardSharkPro.msix
        
        2. TEST THE PACKAGE LOCALLY:
           - Right-click CardSharkPro.msix
           - Select "Install" 
           - Test the app to ensure it works
        
        3. MICROSOFT PARTNER CENTER:
           - Go to: https://partner.microsoft.com/dashboard
           - Sign in with Microsoft account
           - Create new app submission
           - Upload CardSharkPro.msix
           - Fill store listing details
           - Submit for review
        
        4. STORE LISTING REQUIREMENTS:
           - App name: Card Shark Pro
           - Category: Productivity > Utilities
           - Age rating: Get from IARC rating tool
           - Screenshots: At least 1 (1920x1080)
           - App description: Secure vault disguised as card game
           - Privacy policy URL (REQUIRED)
           - Support contact email
        
        5. CERTIFICATION PROCESS:
           - Microsoft will test your app (3-7 days)
           - Check for crashes, security issues
           - Verify app follows store policies
           - You'll get approval or feedback
        
        ‚ö†Ô∏è IMPORTANT NOTES:
        - Test the MSIX package thoroughly before submission
        - Ensure app doesn't crash on startup
        - All features should work properly
        - Create privacy policy and support page
        
        üìû SUPPORT:
        - Microsoft Store docs: https://docs.microsoft.com/windows/uwp/publish/
        - Partner Center help: https://partner.microsoft.com/support
        
        Good luck with your submission! üçÄ
        "@
        
        $instructions | Out-File -FilePath "SUBMISSION-GUIDE.txt" -Encoding UTF8
    
    - name: Upload submission guide
      uses: actions/upload-artifact@v4
      with:
        name: Submission-Instructions
        path: SUBMISSION-GUIDE.txt
