name: Build Windows Executable

on:
  push:
    branches: [ real-microsoft-store-submission ]
  pull_request:
    branches: [ real-microsoft-store-submission ]
  workflow_dispatch:

jobs:
  build-msix-package:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka
        pip install kivy kivy-deps.angle kivy-deps.sdl2 kivy-deps.glew
        pip install kivymd pillow qrcode bcrypt cryptography
        pip install pygame plyer mutagen imageio imageio-ffmpeg psutil
    
    - name: Create app icon (if missing)
      run: |
        if (-not (Test-Path "icon.png")) {
          Write-Host "Creating placeholder icon..."
          Add-Type -AssemblyName System.Drawing
          $bitmap = New-Object System.Drawing.Bitmap(256, 256)
          $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
          $brush = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::FromArgb(70, 130, 180))
          $graphics.FillRectangle($brush, 0, 0, 256, 256)
          
          # Add text
          $font = New-Object System.Drawing.Font("Arial", 24, [System.Drawing.FontStyle]::Bold)
          $textBrush = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::White)
          $graphics.DrawString("CSP", $font, $textBrush, 100, 110)
          
          $bitmap.Save("icon.png", [System.Drawing.Imaging.ImageFormat]::Png)
          $graphics.Dispose()
          $bitmap.Dispose()
          Write-Host "‚úÖ Placeholder icon created"
        } else {
          Write-Host "‚úÖ Icon file found"
        }
    
    - name: Build standalone app with Nuitka
      env:
        KIVY_GL_BACKEND: angle_sdl2
      run: |
        Write-Host "üî® Building standalone application with Nuitka..."
        python -m nuitka `
        --standalone `
        --assume-yes-for-downloads `
        --windows-disable-console `
        --output-filename=CardSharkPro.exe `
        --windows-icon-from-ico=icon.png `
        --windows-company-name="Your Company" `
        --windows-product-name="Card Shark Pro" `
        --windows-file-version=1.0.0.0 `
        --windows-product-version=1.0.0.0 `
        --windows-file-description="Secure vault application" `
        --include-package=kivymd `
        --include-package=kivy `
        --include-package=PIL `
        --include-package=qrcode `
        --include-package=bcrypt `
        --include-package=cryptography `
        --include-package=pygame `
        --include-package=plyer `
        --include-package=mutagen `
        --include-package=imageio `
        --include-package=psutil `
        --include-package=tkinter `
        --include-data-files=icon.png=icon.png `
        --include-data-files=file_transfer_ui.html=file_transfer_ui.html `
        main.py
        
        Write-Host "‚úÖ Nuitka build completed"
        
        # Verify build
        if (Test-Path "main.dist\CardSharkPro.exe") {
          $size = (Get-Item "main.dist\CardSharkPro.exe").Length / 1MB
          Write-Host "‚úÖ Executable created: $([math]::Round($size, 2)) MB"
        } else {
          Write-Host "‚ùå Executable not found!"
          Get-ChildItem "main.dist" -ErrorAction SilentlyContinue
          exit 1
        }
    
    - name: Prepare MSIX package structure
      run: |
        Write-Host "üì¶ Creating MSIX package structure..."
        
        # Create clean package directory
        $packageRoot = "AppPackage"
        if (Test-Path $packageRoot) { Remove-Item $packageRoot -Recurse -Force }
        New-Item -ItemType Directory -Force -Path $packageRoot
        
        # Copy the entire standalone app
        if (Test-Path "main.dist") {
          Write-Host "üìÅ Copying app files..."
          Copy-Item -Recurse -Force "main.dist\*" $packageRoot
          
          # Verify main executable
          $exePath = Join-Path $packageRoot "CardSharkPro.exe"
          if (Test-Path $exePath) {
            Write-Host "‚úÖ Main executable copied successfully"
          } else {
            Write-Host "‚ùå Main executable not found in package!"
            exit 1
          }
        } else {
          Write-Host "‚ùå Nuitka build directory not found!"
          exit 1
        }
        
        # Create Assets directory and copy icons
        New-Item -ItemType Directory -Force -Path "$packageRoot\Assets"
        
        if (Test-Path "icon.png") {
          # Copy icon to all required asset locations
          Copy-Item "icon.png" "$packageRoot\Assets\Square150x150Logo.png"
          Copy-Item "icon.png" "$packageRoot\Assets\Square44x44Logo.png" 
          Copy-Item "icon.png" "$packageRoot\Assets\StoreLogo.png"
          Copy-Item "icon.png" "$packageRoot\Assets\Wide310x150Logo.png"
          Write-Host "‚úÖ Icons copied to Assets"
        }
    
    - name: Create correct MSIX manifest (AppxManifest.xml)
      run: |
        Write-Host "üìÑ Creating MSIX manifest (AppxManifest.xml)..."
        
        # Create the correct manifest file name that Microsoft expects
        $manifest = @"
        <?xml version="1.0" encoding="utf-8"?>
        <Package xmlns="http://schemas.microsoft.com/appx/manifest/foundation/windows10" 
                 xmlns:uap="http://schemas.microsoft.com/appx/manifest/uap/windows10"
                 xmlns:rescap="http://schemas.microsoft.com/appx/manifest/foundation/windows10/restrictedcapabilities">
          
          <Identity Name="CardSharkPro" 
                    Publisher="CN=YourCompany" 
                    Version="1.0.0.0" />
          
          <Properties>
            <DisplayName>Card Shark Pro</DisplayName>
            <PublisherDisplayName>Your Company</PublisherDisplayName>
            <Logo>Assets\StoreLogo.png</Logo>
            <Description>A secure vault application disguised as a card game</Description>
          </Properties>
          
          <Dependencies>
            <TargetDeviceFamily Name="Windows.Desktop" MinVersion="10.0.17763.0" MaxVersionTested="10.0.22000.0" />
          </Dependencies>
          
          <Applications>
            <Application Id="CardSharkPro" Executable="CardSharkPro.exe" EntryPoint="Windows.FullTrustApplication">
              <uap:VisualElements DisplayName="Card Shark Pro" 
                                  Square150x150Logo="Assets\Square150x150Logo.png" 
                                  Square44x44Logo="Assets\Square44x44Logo.png" 
                                  Description="Secure vault with card game interface" 
                                  BackgroundColor="transparent">
                <uap:DefaultTile Wide310x150Logo="Assets\Wide310x150Logo.png" />
              </uap:VisualElements>
            </Application>
          </Applications>
          
          <Capabilities>
            <Capability Name="internetClient" />
            <rescap:Capability Name="runFullTrust" />
          </Capabilities>
          
        </Package>
        "@
        
        # Save with correct name: AppxManifest.xml (not Package.appxmanifest)
        $manifest | Out-File -FilePath "AppPackage\AppxManifest.xml" -Encoding UTF8
        Write-Host "‚úÖ AppxManifest.xml created"
        
        # Verify manifest file exists
        if (Test-Path "AppPackage\AppxManifest.xml") {
          Write-Host "‚úÖ Manifest file verified"
        } else {
          Write-Host "‚ùå Manifest file creation failed!"
          exit 1
        }
    
    - name: Install Windows SDK for MSIX tools
      run: |
        Write-Host "üîß Installing Windows SDK..."
        
        # Download Windows SDK
        $sdkUrl = "https://go.microsoft.com/fwlink/?linkid=2164145"
        $sdkInstaller = "winsdksetup.exe"
        
        try {
          Invoke-WebRequest -Uri $sdkUrl -OutFile $sdkInstaller -TimeoutSec 300
          Write-Host "‚úÖ SDK downloaded"
          
          # Install SDK with required components
          Start-Process -FilePath $sdkInstaller -ArgumentList "/quiet", "/features", "OptionId.WindowsAppCertificationKit", "OptionId.ManagedNative" -Wait
          Write-Host "‚úÖ SDK installation completed"
          
        } catch {
          Write-Host "‚ö†Ô∏è SDK download/install failed, will try makeappx from existing installation"
        }
    
    - name: Build MSIX package
      run: |
        Write-Host "üèóÔ∏è Building MSIX package..."
        
        # Find makeappx.exe in various possible locations
        $makeappxPaths = @(
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\makeappx.exe",
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\makeappx.exe",
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64\makeappx.exe",
          "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\makeappx.exe"
        )
        
        $makeappx = $null
        foreach ($path in $makeappxPaths) {
          if (Test-Path $path) {
            $makeappx = $path
            Write-Host "‚úÖ Found makeappx.exe: $makeappx"
            break
          }
        }
        
        # If not found in standard locations, search recursively
        if (-not $makeappx) {
          Write-Host "üîç Searching for makeappx.exe..."
          $searchResult = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Name "makeappx.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($searchResult) {
            $makeappx = "C:\Program Files (x86)\Windows Kits\10\bin\$searchResult"
            Write-Host "‚úÖ Found makeappx.exe: $makeappx"
          }
        }
        
        if ($makeappx) {
          Write-Host "üì¶ Creating MSIX package..."
          
          # Verify package contents before creating MSIX
          Write-Host "üìã Package contents:"
          Get-ChildItem "AppPackage" | ForEach-Object { Write-Host "   $($_.Name)" }
          
          # Create MSIX package
          & $makeappx pack /d "AppPackage" /p "CardSharkPro.msix" /l /o
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ MSIX package created successfully!"
            
            if (Test-Path "CardSharkPro.msix") {
              $size = (Get-Item "CardSharkPro.msix").Length / 1MB
              Write-Host "üì¶ Package size: $([math]::Round($size, 2)) MB"
            }
          } else {
            Write-Host "‚ùå MSIX package creation failed with exit code: $LASTEXITCODE"
            
            # Create fallback ZIP package
            Write-Host "üì¶ Creating fallback ZIP package..."
            Compress-Archive -Path "AppPackage\*" -DestinationPath "CardSharkPro-Fallback.zip"
            Write-Host "‚úÖ Fallback ZIP created"
          }
        } else {
          Write-Host "‚ùå makeappx.exe not found! Creating ZIP package only..."
          Compress-Archive -Path "AppPackage\*" -DestinationPath "CardSharkPro-Fallback.zip"
        }
    
    - name: Test MSIX package (optional)
      run: |
        if (Test-Path "CardSharkPro.msix") {
          Write-Host "üß™ Testing MSIX package integrity..."
          
          # Try to list package contents to verify it's valid
          if ($makeappx) {
            & $makeappx unpack /p "CardSharkPro.msix" /d "TestUnpack" /l
            if ($LASTEXITCODE -eq 0) {
              Write-Host "‚úÖ MSIX package is valid"
              Remove-Item "TestUnpack" -Recurse -Force -ErrorAction SilentlyContinue
            } else {
              Write-Host "‚ö†Ô∏è MSIX package may have issues"
            }
          }
        }
    
    - name: Upload Microsoft Store Package
      uses: actions/upload-artifact@v4
      with:
        name: CardSharkPro-Microsoft-Store-Package
        path: |
          CardSharkPro.msix
          CardSharkPro-Fallback.zip
          AppPackage/AppxManifest.xml
        retention-days: 30
        if-no-files-found: warn
    
    - name: Create submission guide
      run: |
        $guide = @"
        üè™ MICROSOFT STORE SUBMISSION GUIDE
        ===================================
        
        ‚úÖ BUILD COMPLETED SUCCESSFULLY!
        
        üì¶ Your Package:
        - CardSharkPro.msix (Ready for Microsoft Store)
        - CardSharkPro-Fallback.zip (Backup if needed)
        - AppxManifest.xml (Package manifest)
        
        üöÄ SUBMISSION STEPS:
        
        1. DOWNLOAD YOUR PACKAGE:
           - Go to GitHub Actions artifacts
           - Download "CardSharkPro-Microsoft-Store-Package"
           - Extract CardSharkPro.msix
        
        2. TEST LOCALLY FIRST:
           - Right-click CardSharkPro.msix
           - Click "Install"
           - Test the app thoroughly
           - Make sure all features work
        
        3. MICROSOFT PARTNER CENTER:
           - Visit: https://partner.microsoft.com/dashboard
           - Sign in with Microsoft account
           - Create new app submission
           - Upload CardSharkPro.msix
           - Complete store listing
        
        4. STORE LISTING INFO:
           - App Name: Card Shark Pro
           - Category: Productivity > Utilities
           - Age Rating: Use IARC rating tool
           - Screenshots: Minimum 1 (1920x1080px)
           - Description: Secure vault disguised as card game
           - Privacy Policy URL: REQUIRED
           - Support Email: REQUIRED
        
        5. REQUIRED ASSETS:
           - App icon: 1240x1240px for store listing
           - Screenshots: Show your app in action
           - Store logo: 300x300px
        
        üí° PRO TIPS:
        - Test on multiple Windows machines
        - Ensure app doesn't crash on startup
        - Check all vault features work properly
        - Prepare privacy policy website
        - Have support email ready
        
        üìû SUPPORT:
        - Store docs: https://docs.microsoft.com/windows/uwp/publish/
        - Partner Center: https://partner.microsoft.com/support
        
        Build Date: $(Get-Date)
        Build Branch: real-microsoft-store-submission
        
        Good luck! üçÄ
        "@
        
        $guide | Out-File -FilePath "SUBMISSION-GUIDE.txt" -Encoding UTF8
    
    - name: Upload submission guide
      uses: actions/upload-artifact@v4
      with:
        name: Submission-Guide
        path: SUBMISSION-GUIDE.txt
