name: Build Windows Executable
on:
  push:
    branches: [ android-removed ]
  pull_request:
    branches: [ android-removed ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install kivy
          pip install kivy-deps.angle
          pip install kivy-deps.sdl2
          pip install kivy-deps.glew
          pip install kivymd
          pip install pillow
          pip install requests
          pip install qrcode
          pip install bcrypt
          pip install cryptography
          pip install pygame
          pip install plyer
          pip install opencv-python
          pip install openpyxl
          pip install docx2txt
          pip install mutagen
          pip install imageio
          pip install imageio_ffmpeg
          pip install psutil
          
      - name: Set OpenGL Backend Environment
        run: |
          $env:KIVY_GL_BACKEND = "angle_sdl2"
          Write-Host "Set KIVY_GL_BACKEND to angle_sdl2"
          
      - name: Create PyInstaller spec file
        run: |
          @'
          # -*- mode: python ; coding: utf-8 -*-
          from kivy_deps import sdl2, glew, angle
          from kivy import kivy_data_dir
          from kivymd import hooks_path as kivymd_hooks_path
          
          block_cipher = None
          
          a = Analysis(
              ['main.py'],
              pathex=['.'],
              binaries=[],
              datas=[],
              hiddenimports=[
                  'kivymd',
                  'kivy',
                  'tkinter',
                  'PIL',
                  'requests',
                  'qrcode',
                  'bcrypt',
                  'cryptography',
                  'pygame',
                  'plyer',
                  'cv2',
                  'openpyxl',
                  'docx2txt',
                  'mutagen',
                  'imageio',
                  'psutil'
              ],
              hookspath=[kivymd_hooks_path],
              hooksconfig={},
              runtime_hooks=[],
              excludes=['enchant', 'twisted'],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )
          
          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
          
          exe = EXE(
              pyz,
              a.scripts,
              *[Tree(p) for p in (sdl2.dep_bins + glew.dep_bins + angle.dep_bins)],
              exclude_binaries=True,
              name='AceInTheHole-Windows',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=False,
              console=True,
              disable_windowed_traceback=False,
              argv_emulation=False,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
          )
          
          coll = COLLECT(
              exe,
              a.binaries,
              a.zipfiles,
              a.datas,
              *[Tree(p) for p in (sdl2.dep_bins + glew.dep_bins + angle.dep_bins)],
              strip=False,
              upx=False,
              upx_exclude=[],
              name='AceInTheHole-Windows'
          )
          '@ | Out-File -FilePath "AceInTheHole.spec" -Encoding utf8
          
      - name: Build with PyInstaller
        env:
          KIVY_GL_BACKEND: angle_sdl2
        run: |
          pyinstaller AceInTheHole.spec
          
      - name: Verify build
        run: |
          if (Test-Path "dist/AceInTheHole-Windows/AceInTheHole-Windows.exe") {
              $size = (Get-Item "dist/AceInTheHole-Windows/AceInTheHole-Windows.exe").Length / 1MB
              Write-Host "Executable created successfully!"
              Write-Host "Size: $([math]::Round($size, 2)) MB"
              Get-ChildItem "dist/AceInTheHole-Windows/" -Name
          } else {
              Write-Host "Error: Executable not found!"
              Get-ChildItem "dist/" -Recurse -Name
              exit 1
          }
          
      - name: Upload Windows executable
        uses: actions/upload-artifact@v4
        with:
          name: AceInTheHole-Windows-Executable
          path: dist/AceInTheHole-Windows/
          retention-days: 30
          
      - name: Create release info
        run: |
          @'
          Build completed successfully!
          
          Download Instructions:
          1. Go to the Actions tab
          2. Click on this workflow run
          3. Download "AceInTheHole-Windows-Executable" 
          4. Extract and run AceInTheHole-Windows.exe
          
          Note: The executable includes all dependencies and should work on any Windows 10+ system.
          '@ | Out-File -FilePath "build-info.txt" -Encoding utf8
          
      - name: Upload build info
        uses: actions/upload-artifact@v4
        with:
          name: Build-Instructions
          path: build-info.txt
