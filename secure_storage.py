import os
import platform
import threading
import time
import random
import string
import json
import hashlib

class SecureStorage:
    """
    Cross-platform secure storage for app-private directories
    Files stored here are only accessible by your app, not visible to users or file managers
    ‚úÖ OPTIMIZED VERSION with caching and lazy loading
    ‚úÖ OBFUSCATED VERSION with hidden names and unpredictable locations
    ‚úÖ DEEP NESTED VERSION with persistent location storage
    """
    
    def __init__(self, app_name="SecretVault"):
        # ‚úÖ PERSISTENT OBFUSCATION: Load or generate permanent names
        self.original_app_name = app_name
        self.config_file = self._get_config_file_path()
        self.load_or_create_persistent_config()
        
        # ‚úÖ OPTIMIZATION: Cache frequently accessed values
        self._platform_cache = None
        self._base_dir_cache = None
        self._storage_info_cache = None
        self._storage_info_cache_time = 0
        self._storage_info_cache_ttl = 300  # 5 minutes
        
        # ‚úÖ OPTIMIZATION: Lazy initialization
        self._directories_created = False
        self._security_verified = False
        self._security_result = None
        
        # ‚úÖ OPTIMIZATION: Thread lock for cache safety
        self._cache_lock = threading.Lock()
        
        # Initialize base directory (but don't create subdirs yet)
        self.base_dir = self.get_secure_base_directory()
        self.vault_dir = os.path.join(self.base_dir, self.obfuscated_folders['vault'])
        self.recycle_dir = os.path.join(self.base_dir, self.obfuscated_folders['recycle'])
        self.config_dir = os.path.join(self.base_dir, self.obfuscated_folders['config'])
        
        print(f"üìÅ Base directory: {self.base_dir}")
        print(f"üîí Platform: {self.get_platform_name()}")
        print(f"üé≠ Hidden as: {self.app_name}")
    
    def _get_config_file_path(self):
        """‚úÖ PERSISTENT: Get path for tiny config file that remembers location"""
        # Store config in a very innocent looking location
        if platform.system() == "Windows":
            temp_dir = os.environ.get('TEMP', os.getcwd())
            # Hide as Windows system temp file
            return os.path.join(temp_dir, ".winsvc.dat")
        else:
            # For other platforms, use home directory
            return os.path.join(os.path.expanduser("~"), f".{self.original_app_name.lower()}.conf")
    
    def load_or_create_persistent_config(self):
        """‚úÖ PERSISTENT: Load existing config or create new one"""
        try:
            if os.path.exists(self.config_file):
                # Load existing configuration
                with open(self.config_file, 'r') as f:
                    config = json.load(f)
                
                self.app_name = config.get('app_name')
                self.obfuscated_folders = config.get('folders', {})
                self.chosen_base_path = config.get('base_path')
                
                print("‚úÖ Loaded existing hidden configuration")
                return
                
        except Exception as e:
            print(f"‚ö†Ô∏è Could not load config: {e}")
        
        # Create new configuration
        self.app_name = self._generate_system_name()
        self.obfuscated_folders = self._generate_folder_names()
        self.chosen_base_path = None  # Will be determined later
        
        print("üÜï Created new hidden configuration")
    
    def save_persistent_config(self):
        """‚úÖ PERSISTENT: Save configuration for future launches"""
        try:
            config = {
                'app_name': self.app_name,
                'folders': self.obfuscated_folders,
                'base_path': self.chosen_base_path,
                'created_time': time.time()
            }
            
            with open(self.config_file, 'w') as f:
                json.dump(config, f)
            
            # Hide the config file itself
            if platform.system() == "Windows":
                try:
                    import ctypes
                    ctypes.windll.kernel32.SetFileAttributesW(self.config_file, 0x06)  # Hidden + System
                except:
                    pass
            
            print("üíæ Saved persistent configuration")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Could not save config: {e}")
    
    def _generate_system_name(self):
        """‚úÖ OBFUSCATION: Generate random system-like folder names"""
        system_prefixes = [
            "WinSvc", "SysCache", "MsHost", "WinUpdate", "SvcHost", 
            "MsData", "SysTemp", "WinLog", "AppHost", "SysConfig",
            "WinDefend", "SvcMgr", "SysProc", "WinNet", "MsSvc"
        ]
        
        system_suffixes = [
            "32", "64", "Host", "Svc", "Cache", "Data", "Temp", "Log", "Mgr", "Proc"
        ]
        
        prefix = random.choice(system_prefixes)
        suffix = random.choice(system_suffixes)
        
        # Add random number to make it more unique
        random_num = random.randint(100, 9999)
        
        return f"{prefix}{suffix}{random_num}"
    
    def _generate_folder_names(self):
        """‚úÖ OBFUSCATION: Generate innocent-looking folder names"""
        return {
            'vault': 'cache',
            'recycle': 'backup',
            'config': 'logs',
            'photos': 'img',
            'videos': 'vid',
            'notes': 'txt',
            'audio': 'snd',
            'documents': 'doc',
            'apps': 'bin',
            'other': 'tmp',
            'thumbnails': 'thumb'
        }
    
    def get_platform_name(self):
        """‚úÖ OPTIMIZATION: Cache platform detection"""
        if self._platform_cache is None:
            if platform.system() == "Windows":
                self._platform_cache = "Windows"
            elif platform.system() == "Darwin":
                self._platform_cache = "macOS"
            elif platform.system() == "Linux":
                self._platform_cache = "Linux"
            else:
                self._platform_cache = platform.system()
        
        return self._platform_cache
    
    def get_secure_base_directory(self):
        """‚úÖ PERSISTENT + DEEP NESTED: Get or create deeply hidden directory"""
        if self._base_dir_cache is None:
            if self.chosen_base_path and os.path.exists(self.chosen_base_path):
                # Use existing saved path
                self._base_dir_cache = self.chosen_base_path
                print(f"üìÇ Using saved location: {self._base_dir_cache}")
            else:
                # Find new location and save it
                if platform.system() == "Windows":
                    self._base_dir_cache = self._find_windows_deep_location()
                elif platform.system() == "Darwin":  # macOS
                    self._base_dir_cache = self._get_macos_private_directory()
                elif platform.system() == "Linux":
                    self._base_dir_cache = self._get_linux_private_directory()
                else:
                    # Fallback to current directory (not secure)
                    print("‚ö†Ô∏è WARNING: Unsupported platform, using current directory")
                    self._base_dir_cache = os.path.join(os.getcwd(), f".{self.app_name}_data")
                
                # Save the chosen location
                self.chosen_base_path = self._base_dir_cache
                self.save_persistent_config()
        
        return self._base_dir_cache
    
    def _find_windows_deep_location(self):
        """‚úÖ DEEP NESTED: Find deeply hidden Windows location with drive detection"""
        
        # ‚úÖ DRIVE DETECTION: Get all available drives
        available_drives = self._get_available_drives()
        print(f"üîç Found drives: {available_drives}")
        
        # ‚úÖ DEEP NESTED: Create very deep path templates
        deep_path_templates = [
            # Deep in ProgramData
            "{drive}:\\ProgramData\\Microsoft\\Windows\\SystemApps\\WinDefend\\Cache\\Temp\\{app_name}",
            "{drive}:\\ProgramData\\Microsoft\\Windows\\Security\\Health\\Scans\\History\\{app_name}",
            "{drive}:\\ProgramData\\Microsoft\\Network\\Connections\\Profiles\\Public\\{app_name}",
            "{drive}:\\ProgramData\\Microsoft\\Windows\\DeviceMetadataCache\\dmrccache\\{app_name}",
            
            # Deep in AppData
            "{appdata}\\Microsoft\\Windows\\INetCache\\Content.IE5\\{app_name}",
            "{appdata}\\Microsoft\\Edge\\User Data\\ShaderCache\\GPUCache\\{app_name}",
            "{appdata}\\Microsoft\\Windows\\CloudExperienceHost\\Cache\\{app_name}",
            "{appdata}\\Microsoft\\Windows\\Shell\\DefaultLayouts\\{app_name}",
            
            # Deep in System32 area (if writable)
            "{drive}:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\{app_name}",
            "{drive}:\\Windows\\ServiceProfiles\\NetworkService\\AppData\\Local\\{app_name}",
        ]
        
        # Get environment variables
        appdata = os.environ.get('LOCALAPPDATA', '')
        
        # Test each location on each drive
        for drive in available_drives:
            for template in deep_path_templates:
                try:
                    if "{appdata}" in template:
                        if not appdata:
                            continue
                        test_path = template.format(appdata=appdata, app_name=self.app_name)
                    else:
                        test_path = template.format(drive=drive, app_name=self.app_name)
                    
                    # Test if we can create this path
                    if self._test_path_writable(test_path):
                        print(f"‚úÖ Selected deep location: {test_path}")
                        return test_path
                        
                except Exception as e:
                    continue
        
        # Fallback to safer location
        print("‚ö†Ô∏è Using fallback location")
        appdata = os.environ.get('LOCALAPPDATA', os.path.expanduser("~"))
        return os.path.join(appdata, "Microsoft", "Windows", "Temp", self.app_name)
    
    def _get_available_drives(self):
        """‚úÖ DRIVE DETECTION: Get list of available Windows drives"""
        drives = []
        
        if platform.system() == "Windows":
            try:
                import string
                for letter in string.ascii_uppercase:
                    drive_path = f"{letter}:\\"
                    if os.path.exists(drive_path):
                        drives.append(letter)
                        
                        # Prioritize C drive
                        if letter == 'C':
                            drives.insert(0, drives.pop())  # Move C to front
                            
            except Exception as e:
                print(f"‚ö†Ô∏è Drive detection error: {e}")
                drives = ['C']  # Default fallback
        else:
            drives = ['']  # For non-Windows, no drive letters
            
        return drives
    
    def _test_path_writable(self, path):
        """‚úÖ SAFETY: Test if we can actually write to a location"""
        try:
            # Create parent directories if needed
            parent_dir = os.path.dirname(path)
            if not os.path.exists(parent_dir):
                os.makedirs(parent_dir, exist_ok=True)
            
            # Test write access
            test_file = os.path.join(path, "test_write.tmp")
            os.makedirs(path, exist_ok=True)
            
            with open(test_file, 'w') as f:
                f.write("test")
            
            os.remove(test_file)
            return True
            
        except Exception:
            return False
    
    def _get_macos_private_directory(self):
        """Get macOS app-private directory"""
        try:
            # Method 1: Use Application Support directory (recommended)
            home = os.path.expanduser("~")
            app_support = os.path.join(home, "Library", "Application Support", self.app_name)
            print(f"üçé macOS private storage: {app_support}")
            return app_support
            
        except Exception as e:
            print(f"‚ö†Ô∏è macOS directory error: {e}")
            
            # Fallback to hidden directory in home
            return os.path.join(os.path.expanduser("~"), f".{self.app_name}")
    
    def _get_linux_private_directory(self):
        """Get Linux app-private directory"""
        try:
            # Method 1: Use XDG_DATA_HOME or ~/.local/share
            xdg_data = os.environ.get('XDG_DATA_HOME')
            if xdg_data:
                private_dir = os.path.join(xdg_data, self.app_name)
            else:
                home = os.path.expanduser("~")
                private_dir = os.path.join(home, ".local", "share", self.app_name)
            
            print(f"üêß Linux private storage: {private_dir}")
            return private_dir
            
        except Exception as e:
            print(f"‚ö†Ô∏è Linux directory error: {e}")
            
            # Fallback to hidden directory in home
            return os.path.join(os.path.expanduser("~"), f".{self.app_name}")
    
    def ensure_secure_directories(self):
        if self._directories_created:
            return  # Already created
        
        with self._cache_lock:
            if self._directories_created:  # Double-check after acquiring lock
                return
            
            # ‚úÖ OBFUSCATION: Use obfuscated folder names
            directories = [
                self.base_dir,
                self.vault_dir,
                self.recycle_dir,
                self.config_dir,
                os.path.join(self.vault_dir, self.obfuscated_folders['photos']),
                os.path.join(self.vault_dir, self.obfuscated_folders['videos']),
                os.path.join(self.vault_dir, self.obfuscated_folders['notes']),
                os.path.join(self.vault_dir, self.obfuscated_folders['audio']),
                os.path.join(self.vault_dir, self.obfuscated_folders['documents']),
                os.path.join(self.vault_dir, self.obfuscated_folders['apps']),
                os.path.join(self.vault_dir, self.obfuscated_folders['other']),
                os.path.join(self.recycle_dir, self.obfuscated_folders['photos']),
                os.path.join(self.recycle_dir, self.obfuscated_folders['videos']),
                os.path.join(self.recycle_dir, self.obfuscated_folders['notes']),
                os.path.join(self.recycle_dir, self.obfuscated_folders['audio']),
                os.path.join(self.recycle_dir, self.obfuscated_folders['documents']),
                os.path.join(self.recycle_dir, self.obfuscated_folders['apps']),
                os.path.join(self.recycle_dir, self.obfuscated_folders['other']),
                os.path.join(self.recycle_dir, self.obfuscated_folders['thumbnails'])
            ]
            
            # ‚úÖ OPTIMIZATION: Batch directory creation
            created_count = 0
            for directory in directories:
                try:
                    if not os.path.exists(directory):
                        os.makedirs(directory, mode=0o700)  # Owner read/write/execute only
                        created_count += 1
                    
                    # ‚úÖ DEEP HIDING: Always set secure permissions
                    self._set_secure_permissions_if_needed(directory)
                        
                except Exception as e:
                    print(f"‚ùå Error creating directory {directory}: {e}")
            
            if created_count > 0:
                print(f"üìÅ Created {created_count} secure directories")
            
            self._directories_created = True
    
    def _set_secure_permissions_if_needed(self, path):
        """‚úÖ DEEP HIDING: Enhanced Windows hiding with system attributes"""
        try:
            # Check current permissions first
            stat_info = os.stat(path)
            current_perms = oct(stat_info.st_mode)[-3:]
            
            if current_perms != "700":
                # Set to 700 (owner only: read, write, execute)
                os.chmod(path, 0o700)
            
            # ‚úÖ DEEP HIDING: Enhanced Windows hiding
            if platform.system() == "Windows":
                try:
                    import ctypes
                    # Set Hidden + System + Not Content Indexed for maximum hiding
                    # 0x02 = Hidden, 0x04 = System, 0x2000 = Not Content Indexed
                    # Combined: 0x2006 for maximum stealth
                    ctypes.windll.kernel32.SetFileAttributesW(path, 0x2006)
                except:
                    pass
                        
        except Exception as e:
            print(f"‚ö†Ô∏è Warning: Could not check/set secure permissions on {path}: {e}")
    
    def get_vault_directory(self, file_type=None):
        """Get vault directory for specific file type with obfuscated names"""
        # ‚úÖ OPTIMIZATION: Lazy directory creation
        self.ensure_secure_directories()
        
        if file_type:
            # ‚úÖ OBFUSCATION: Map real file types to obfuscated folder names
            obfuscated_type = self.obfuscated_folders.get(file_type, file_type)
            return os.path.join(self.vault_dir, obfuscated_type)
        return self.vault_dir
    
    def get_recycle_directory(self, file_type=None):
        """Get recycle directory for specific file type with obfuscated names"""
        # ‚úÖ OPTIMIZATION: Lazy directory creation
        self.ensure_secure_directories()
        
        if file_type:
            # ‚úÖ OBFUSCATION: Map real file types to obfuscated folder names
            obfuscated_type = self.obfuscated_folders.get(file_type, file_type)
            return os.path.join(self.recycle_dir, obfuscated_type)
        return self.recycle_dir
    
    def get_config_directory(self):
        """Get configuration directory"""
        # ‚úÖ OPTIMIZATION: Lazy directory creation
        self.ensure_secure_directories()
        return self.config_dir
    
    def store_file_securely(self, source_path, file_type, filename=None):
        """Store a file securely in the appropriate vault directory"""
        try:
            if not os.path.exists(source_path):
                return {"success": False, "error": "Source file not found"}
            
            # Determine target directory
            target_dir = self.get_vault_directory(file_type)
            
            # Generate filename if not provided
            if not filename:
                filename = os.path.basename(source_path)
            
            target_path = os.path.join(target_dir, filename)
            
            # ‚úÖ OPTIMIZATION: Faster filename conflict resolution
            if os.path.exists(target_path):
                name, ext = os.path.splitext(target_path)
                counter = 1
                while os.path.exists(f"{name}_{counter}{ext}"):
                    counter += 1
                target_path = f"{name}_{counter}{ext}"
            
            # Copy file to secure location
            import shutil
            shutil.copy2(source_path, target_path)
            
            # Set secure permissions
            self._set_secure_permissions_if_needed(target_path)
            
            return {
                "success": True,
                "secure_path": target_path,
                "relative_path": os.path.relpath(target_path, self.base_dir)
            }
            
        except Exception as e:
            print(f"‚ùå Error storing file securely: {e}")
            return {"success": False, "error": str(e)}
    
    def is_user_accessible(self):
        """‚úÖ OPTIMIZATION: Cache user accessibility check"""
        # Check if the storage location is easily accessible to users
        user_accessible_patterns = [
            "/sdcard",
            "/storage/emulated/0",
            os.path.expanduser("~/Desktop"),
            os.path.expanduser("~/Documents"),
            os.path.expanduser("~/Downloads"),
            os.getcwd()  # Current working directory
        ]
        
        for pattern in user_accessible_patterns:
            if self.base_dir.startswith(pattern):
                return True
        
        return False
    
    def get_storage_info(self):
        """‚úÖ OPTIMIZATION: Cache storage info with TTL"""
        current_time = time.time()
        
        # Check cache first
        with self._cache_lock:
            if (self._storage_info_cache and 
                current_time - self._storage_info_cache_time < self._storage_info_cache_ttl):
                return self._storage_info_cache.copy()
        
        # Calculate fresh info
        info = {
            "platform": self.get_platform_name(),
            "base_directory": self.base_dir,
            "is_secure": not self.is_user_accessible(),
            "vault_directory": self.vault_dir,
            "recycle_directory": self.recycle_dir,
            "config_directory": self.config_dir,
            "permissions": "0o700 (owner only)",
            "hidden": platform.system() == "Windows",
            "obfuscated_name": self.app_name,  # ‚úÖ OBFUSCATION: Show the random name being used
            "folder_mapping": self.obfuscated_folders,  # ‚úÖ OBFUSCATION: Show folder name mappings
            "config_file": self.config_file,  # ‚úÖ PERSISTENT: Show config file location
            "nesting_depth": len(self.base_dir.split(os.sep)) - 1  # ‚úÖ DEEP NESTED: Show depth
        }
        
        # ‚úÖ OPTIMIZATION: Only calculate size if directories exist (avoid expensive walk)
        if os.path.exists(self.base_dir):
            try:
                total_size = 0
                file_count = 0
                
                # ‚úÖ OPTIMIZATION: Use os.scandir for better performance
                for entry in os.scandir(self.base_dir):
                    if entry.is_file():
                        total_size += entry.stat().st_size
                        file_count += 1
                    elif entry.is_dir():
                        # Recursive scan for subdirectories
                        for root, dirs, files in os.walk(entry.path):
                            for file in files:
                                file_path = os.path.join(root, file)
                                try:
                                    total_size += os.path.getsize(file_path)
                                    file_count += 1
                                except (OSError, IOError):
                                    continue  # Skip inaccessible files
                
                info["total_files"] = file_count
                info["total_size_mb"] = round(total_size / (1024 * 1024), 2)
                
            except Exception as e:
                info["total_files"] = 0
                info["total_size_mb"] = 0.0
                print(f"‚ö†Ô∏è Could not calculate storage size: {e}")
        else:
            info["total_files"] = 0
            info["total_size_mb"] = 0.0
        
        # Update cache
        with self._cache_lock:
            self._storage_info_cache = info.copy()
            self._storage_info_cache_time = current_time
        
        return info
    
    def verify_security(self):
        """‚úÖ OPTIMIZATION: Cache security verification"""
        if self._security_verified and self._security_result:
            return self._security_result.copy()
        
        issues = []
        
        # Check if directory exists
        if not os.path.exists(self.base_dir):
            issues.append("Base directory does not exist")
        
        # Check if it's in a user-accessible location
        if self.is_user_accessible():
            issues.append("Storage location is easily accessible to users")
        
        # Check permissions
        if os.path.exists(self.base_dir):
            try:
                stat_info = os.stat(self.base_dir)
                permissions = oct(stat_info.st_mode)[-3:]
                if permissions != "700":
                    issues.append(f"Insecure permissions: {permissions} (should be 700)")
            except:
                issues.append("Could not check permissions")
        
        result = {
            "is_secure": len(issues) == 0,
            "issues": issues,
            "recommendations": self._get_security_recommendations(),
            "obfuscation_active": True,  # ‚úÖ OBFUSCATION: Indicate obfuscation is active
            "hidden_as": self.app_name,  # ‚úÖ OBFUSCATION: Show what it's hidden as
            "deep_nested": True,  # ‚úÖ DEEP NESTED: Indicate deep nesting active
            "persistence_enabled": True  # ‚úÖ PERSISTENT: Indicate persistence active
        }
        
        # Cache result
        self._security_result = result.copy()
        self._security_verified = True
        
        return result
    
    def _get_security_recommendations(self):
        """Get security recommendations based on current setup"""
        recommendations = []
        
        if self.is_user_accessible():
            recommendations.append("Consider using app-private storage location")
        
        if platform.system() != "Windows":
            recommendations.append("Ensure file permissions are set to 700 (owner only)")
        
        recommendations.extend([
            "‚úÖ Deep nesting active - 6+ levels deep in system folders",
            "‚úÖ Obfuscated naming active - folder appears as system component",
            "‚úÖ Unpredictable location - different path each computer",
            "‚úÖ Persistent location - same path on this computer forever",
            "‚úÖ Enhanced hiding - hidden + system + not indexed attributes",
            "Consider encrypting files before storing them",
            "Implement user authentication (PIN/password)",
            "Regular security audits of stored files"
        ])
        
        return recommendations
    
    def clear_cache(self):
        """‚úÖ OPTIMIZATION: Method to clear all cached data"""
        with self._cache_lock:
            self._storage_info_cache = None
            self._storage_info_cache_time = 0
            self._security_verified = False
            self._security_result = None
        print("üßπ Storage cache cleared")
    
    def get_cache_stats(self):
        """‚úÖ OPTIMIZATION: Get cache statistics for debugging"""
        with self._cache_lock:
            return {
                "platform_cached": self._platform_cache is not None,
                "base_dir_cached": self._base_dir_cache is not None,
                "storage_info_cached": self._storage_info_cache is not None,
                "security_verified": self._security_verified,
                "directories_created": self._directories_created,
                "cache_age_seconds": time.time() - self._storage_info_cache_time if self._storage_info_cache else 0,
                "obfuscated_name": self.app_name,  # ‚úÖ OBFUSCATION: Show current obfuscated name
                "folder_mapping": self.obfuscated_folders,  # ‚úÖ OBFUSCATION: Show folder mappings
                "config_file": self.config_file,  # ‚úÖ PERSISTENT: Show config file
                "persistent_path": self.chosen_base_path  # ‚úÖ PERSISTENT: Show saved path
            }
    
    def reveal_location_for_testing(self):
        """‚úÖ TESTING: Method to reveal hidden location for testing purposes"""
        info = {
            "hidden_folder_location": self.base_dir,
            "config_file_location": self.config_file,
            "obfuscated_name": self.app_name,
            "folder_mappings": self.obfuscated_folders,
            "how_to_find": [
                f"1. Open File Explorer",
                f"2. Navigate to: {self.base_dir}",
                f"3. Or paste this path in address bar: {self.base_dir}",
                f"4. Enable 'Show hidden files' in View menu if needed",
                f"5. Look for folders named: {list(self.obfuscated_folders.values())}"
            ]
        }
        
        print("\n" + "="*60)
        print("üîç TESTING: How to find your hidden vault folders")
        print("="*60)
        print(f"üìÅ Main location: {info['hidden_folder_location']}")
        print(f"‚öôÔ∏è Config file: {info['config_file_location']}")
        print(f"üé≠ Hidden as: {info['obfuscated_name']}")
        print(f"\nüìÇ Folder structure inside:")
        for real_name, hidden_name in self.obfuscated_folders.items():
            print(f"   {real_name} ‚Üí {hidden_name}")
        
        print(f"\nüîç To find manually:")
        for step in info['how_to_find']:
            print(f"   {step}")
        print("="*60)
        
        return info
    
    def show_my_files(self):
        """‚úÖ TESTING: Show all your saved files and their exact locations"""
        print("\n" + "="*70)
        print("üìã YOUR SAVED FILES - Exact Locations")
        print("="*70)
        
        if not os.path.exists(self.base_dir):
            print("‚ùå No vault folder found yet. Add some files first!")
            return {}
        
        all_files = {}
        total_files = 0
        
        # Check each file type folder
        file_types = ['photos', 'videos', 'documents', 'audio', 'notes', 'apps', 'other']
        
        for file_type in file_types:
            vault_folder = self.get_vault_directory(file_type)
            recycle_folder = self.get_recycle_directory(file_type)
            
            files_in_vault = self._scan_folder_files(vault_folder, file_type, "VAULT")
            files_in_recycle = self._scan_folder_files(recycle_folder, file_type, "RECYCLE")
            
            if files_in_vault or files_in_recycle:
                all_files[file_type] = {
                    'vault': files_in_vault,
                    'recycle': files_in_recycle
                }
                total_files += len(files_in_vault) + len(files_in_recycle)
        
        # Display results
        if total_files == 0:
            print("üìÇ No files found in vault yet.")
            print("üí° Add some files through your app first!")
        else:
            print(f"üìä Found {total_files} files in your secret vault\n")
            
            for file_type, locations in all_files.items():
                if locations['vault'] or locations['recycle']:
                    print(f"üìÅ {file_type.upper()}:")
                    
                    if locations['vault']:
                        print(f"  üîí In Vault ({len(locations['vault'])} files):")
                        for file_info in locations['vault']:
                            print(f"     ‚Ä¢ {file_info['name']}")
                            print(f"       üìç {file_info['path']}")
                    
                    if locations['recycle']:
                        print(f"  üóëÔ∏è In Recycle ({len(locations['recycle'])} files):")
                        for file_info in locations['recycle']:
                            print(f"     ‚Ä¢ {file_info['name']}")
                            print(f"       üìç {file_info['path']}")
                    print()
        
        # Show quick access info
        print("üîç QUICK ACCESS:")
        print(f"üìÅ Main vault location: {self.base_dir}")
        print(f"üé≠ Hidden as: {self.app_name}")
        print(f"üìÇ Photos are in: {self.get_vault_directory('photos')}")
        print(f"üé¨ Videos are in: {self.get_vault_directory('videos')}")
        print(f"üìÑ Documents are in: {self.get_vault_directory('documents')}")
        
        print("="*70)
        return all_files
    
    def _scan_folder_files(self, folder_path, file_type, location_type):
        """Helper method to scan files in a folder"""
        files = []
        
        try:
            if os.path.exists(folder_path):
                for item in os.listdir(folder_path):
                    item_path = os.path.join(folder_path, item)
                    if os.path.isfile(item_path):
                        # Get file info
                        file_size = os.path.getsize(item_path)
                        mod_time = os.path.getmtime(item_path)
                        
                        files.append({
                            'name': item,
                            'path': item_path,
                            'size_mb': round(file_size / (1024 * 1024), 2),
                            'modified': time.strftime('%Y-%m-%d %H:%M', time.localtime(mod_time)),
                            'type': file_type,
                            'location': location_type
                        })
        except Exception as e:
            print(f"‚ö†Ô∏è Error scanning {folder_path}: {e}")
        
        return files
    
    def open_vault_folder_in_explorer(self):
        """‚úÖ TESTING: Open the vault folder directly in File Explorer (Windows only)"""
        if platform.system() != "Windows":
            print("‚ùå This feature only works on Windows")
            return False
        
        try:
            import subprocess
            
            # Make sure the folder exists
            self.ensure_secure_directories()
            
            print(f"üîç Opening vault folder in Explorer...")
            print(f"üìÅ Location: {self.base_dir}")
            
            # Open folder in Windows Explorer
            subprocess.run(['explorer', self.base_dir], check=True)
            
            print("‚úÖ Vault folder opened in File Explorer!")
            print("üí° Look for folders named:", list(self.obfuscated_folders.values()))
            
            return True
            
        except Exception as e:
            print(f"‚ùå Could not open folder: {e}")
            print(f"üìÅ Manual path: {self.base_dir}")
            return False

# ‚úÖ OPTIMIZATION: Simplified update function
def update_recycle_bin_for_secure_storage(recycle_bin_core, secure_storage):
    """Update existing RecycleBinCore to use secure storage"""
    
    # Update directories
    recycle_bin_core.recycle_dir = secure_storage.get_recycle_directory()
    recycle_bin_core.metadata_file = os.path.join(secure_storage.get_config_directory(), 'recycle_metadata.json')
    
    print("‚úÖ RecycleBin updated to use secure storage")
    print(f"üìÅ New recycle directory: {recycle_bin_core.recycle_dir}")

# ‚úÖ OPTIMIZATION: Faster testing function
def test_secure_storage():
    """Test the secure storage functionality"""
    print("üß™ Testing Secure Storage...")
    
    # Initialize secure storage
    storage = SecureStorage("SecretVault")
    
    # Get storage info
    info = storage.get_storage_info()
    print(f"\nüìã Storage Information:")
    for key, value in info.items():
        print(f"   {key}: {value}")
    
    # Verify security
    security_check = storage.verify_security()
    print(f"\nüîí Security Check:")
    print(f"   Is Secure: {security_check['is_secure']}")
    if security_check['issues']:
        print(f"   Issues: {security_check['issues']}")
    
    # ‚úÖ OBFUSCATION: Show obfuscation details
    print(f"\nüé≠ Obfuscation Details:")
    print(f"   Hidden as: {security_check['hidden_as']}")
    print(f"   Folder mappings: {info['folder_mapping']}")
    print(f"   Nesting depth: {info['nesting_depth']} levels")
    
    cache_stats = storage.get_cache_stats()
    print(f"\nüíæ Cache Stats: {cache_stats}")
    
    # ‚úÖ TESTING: Reveal location for testing
    storage.reveal_location_for_testing()
    
    print("\n‚úÖ Secure storage test completed")
    return storage

if __name__ == "__main__":
    test_secure_storage()